{"version":3,"sources":["logo.svg","components/Tile.tsx","components/game-logic.ts","components/GameBoard.tsx","components/Numpad.tsx","components/puzzles.ts","components/Sudoku.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Tile","memo","_ref","x","y","value","onClick","isFixed","isValid","isFocused","isSelected","isHighlighted","onHover","onHoverEnd","borderLeft","borderTop","React","createElement","onMouseEnter","onMouseLeave","className","concat","getTileID","getTileFromId","id","Math","floor","getTileValue","b","getTileValueById","isBoardFilled","every","r","v","getAvailableNumbers","unavail","Map","forEach","tx","set","ty","length","boxCols","boxRows","by","bx","filter","n","has","useAutoSolver","badAssignBoard","guesses","history","undoTarget","undoCount","getUndoAction","lastMove","pop","tileId","val","console","error","getBestMove","ab","newAB","generateAvailBoard","min","bestId","bestOptions","aba","Array","from","entries","nums","badA","get","fnums","e","includes","l","rg","log","slice","gTileId","gVal","badguesses","guessIdx","findIndex","random","push","startNewAttempt","splice","clear","getMove","DEFAULT_BOARD","fill","map","_","i","GameBoard","validBoard","hoveredTile","setHoveredTile","selectedTile","fixedBoardNumbers","handleSelectTile","handleHover","handleHoverEnd","isHovered","hx","hy","handleClick","key","Object","assign","getTileProps","onSet","currVal","availableNums","puzzleToBoard","sr","row","parseInt","puzzles","easy","medium","hard","getEmptyBoard","Sudoku","mobile","isAutosolving","setAutosolving","useState","autosolveTimeout","setAutosolveTimeout","btnDisabled","setBtnDisabled","currBoard","setCurrBoard","setFixedBoardNumbers","autoSolveDelay","setAutoSolveDelay","prevBoard","setPrevBoard","setValidBoard","setSelectedTile","currAvailNums","setCurrAvailNums","updateValidBoard","useCallback","newVB","isTileValid","valid","some","dx","dy","handleSetValue","pb","setNumber","nb","getAvailableNumbersById","autosolver","autoSolve","board","doBestMove","window","clearTimeout","setTimeout","setBoardToPuzzle","difficulty","newPuzzle","useEffect","boardProps","tabIndex","onKeyDown","nx","ny","newVal","clearNumber","isInvalidCoords","_ref2","txt","puzzleId","disabled","Numpad","type","max","onChange","target","handleAutoSolve","clearBoard","App","isMobile","useMediaQuery","query","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.c66e8774.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React, { memo } from \"react\";\nimport \"./sudoku.css\";\n\ninterface TileProps {\n  x: number;\n  y: number;\n  value: number;\n  isFixed: boolean;\n  isValid: boolean;\n  isFocused: boolean;\n  isSelected: boolean;\n  isHighlighted: boolean;\n  onClick: () => void;\n  onHover: () => void;\n  onHoverEnd: () => void;\n}\n\nconst Tile = memo(function Tile({\n  x,\n  y,\n  value,\n  onClick,\n  isFixed,\n  isValid,\n  isFocused,\n  isSelected,\n  isHighlighted,\n  onHover,\n  onHoverEnd,\n}: TileProps) {\n  const borderLeft = x % 3 === 0;\n  const borderTop = y % 3 === 0;\n\n  const getBordersClassNames = () =>\n    `${borderTop ? \"border-top\" : \"\"} ${borderLeft ? \"border-left\" : \"\"} ${\n      y === 8 ? \"border-bottom\" : \"\"\n    } \n    ${x === 8 ? \"border-right\" : \"\"}`;\n\n  return (\n    <div\n      onMouseEnter={onHover}\n      onMouseLeave={onHoverEnd}\n      onClick={onClick}\n      className={`tile ${getBordersClassNames()}`}\n    >\n      <div\n        className={`tile-content ${isSelected ? \"selected\" : \"\"} \n        ${isFixed ? \"fixed\" : \"\"} \n        ${isFocused ? \"focused\" : \"\"} \n        ${isHighlighted ? \"highlight\" : \"\"} \n        ${!isValid ? \"invalid\" : \"\"}`}\n      >\n        <div className={`tile-number ${value === 0 ? \"no-val\" : \"\"}`}>\n          {value > 0 ? value : \"\"}\n        </div>\n      </div>\n    </div>\n  );\n});\n\n// Memoize Tile\nexport default Tile;\n","import { Action, Board, AvailBoard } from \"./types\";\n\nexport const isInvalidCoords = (x: number, y: number) =>\n  x > 8 || y > 8 || x < 0 || y < 0;\n\nexport const getTileID = (x: number, y: number) => y * 100 + x;\nexport const getTileFromId = (id: number) => [id % 100, Math.floor(id / 100)];\n\nexport const getTileValue = (x: number, y: number, b: Board) => b[y][x];\n\nexport const getTileValueById = (id: number, b: Board) => {\n  if (id < 0) {\n    return 0;\n  }\n  const [x, y] = getTileFromId(id);\n  return getTileValue(x, y, b);\n};\n\nexport const isBoardFilled = (b: Board) => {\n  return b.every((r) => r.every((v) => v > 0));\n};\n\nexport const getAvailableNumbers = (x: number, y: number, b: Board) => {\n  const avail = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const unavail = new Map<number, boolean>();\n  b[y].forEach((v: number, tx: number) => {\n    if (tx !== x) {\n      unavail.set(v, true);\n    }\n  });\n\n  b.forEach((r: Array<number>, ty: number) => {\n    if (ty !== y) {\n      unavail.set(r[x], true);\n    }\n  });\n\n  if (unavail.set.length === 9) {\n    return [];\n  }\n\n  // Box check\n  let boxCols = [6, 7, 8];\n  if (x < 3) {\n    boxCols = [0, 1, 2];\n  } else if (x < 6) {\n    boxCols = [3, 4, 5];\n  }\n\n  let boxRows = [6, 7, 8];\n  if (y < 3) {\n    boxRows = [0, 1, 2];\n  } else if (y < 6) {\n    boxRows = [3, 4, 5];\n  }\n\n  boxRows.forEach((by) =>\n    boxCols.forEach((bx) => {\n      if (by !== y || bx !== x) {\n        unavail.set(b[by][bx], true);\n      }\n    })\n  );\n\n  return avail.filter((n) => !unavail.has(n));\n};\n\nexport const getAvailableNumbersById = (id: number, b: Board) => {\n  if (id < 0) {\n    return [];\n  }\n  const [x, y] = getTileFromId(id);\n  const a = getAvailableNumbers(x, y, b);\n  // console.log(`Available numbers at [${x},${y}]: ${a}`);\n  return a;\n};\n\nexport const generateAvailBoard = (b: Board) => {\n  const newAB = new Map() as AvailBoard;\n\n  b.forEach((r, y) =>\n    // Skip tiles that already have value\n    r.forEach((v, x) => {\n      if (v === 0) {\n        // Filter for unassigned tiles\n        newAB.set(getTileID(x, y), getAvailableNumbers(x, y, b));\n      }\n    })\n  );\n  return newAB;\n};\n\n// ==================== Constraint solver ====================\n\nexport const useAutoSolver = () => {\n  // Type of Availboard\n  const badAssignBoard = new Map<number, number[]>();\n  const guesses: Action[] = []; // Numbers randomly chosen\n  const history: Action[] = [];\n  let undoTarget = -1;\n  let undoCount = 0;\n\n  const startNewAttempt = () => {\n    undoCount = 0;\n    history.splice(0, history.length);\n    guesses.splice(0, guesses.length);\n    badAssignBoard.clear();\n  };\n\n  const getUndoAction = () => {\n    const lastMove = { ...history.pop() } as Action;\n\n    if (!lastMove) {\n      console.error(`No history!`);\n      return { tileId: -1, val: 0 } as Action;\n    }\n\n    // Clear bad guesses if undo\n    if (lastMove.tileId !== undoTarget) {\n      badAssignBoard.set(lastMove.tileId, []);\n    }\n\n    return {\n      tileId: lastMove.tileId,\n      val: 0,\n    } as Action;\n  };\n\n  // Todo: Heuristic for guessing\n  const getBestMove = (b: Board, badAssignBoard: AvailBoard) => {\n    let r = { tileId: -1, val: 1 } as Action;\n\n    if (undoCount > 0) {\n      // console.log(\"Undoing!\");\n      undoCount -= 1;\n      return getUndoAction();\n    }\n\n    if (isBoardFilled(b)) {\n      return { ...r };\n    }\n\n    const ab = generateAvailBoard(b);\n    if (!ab) {\n      return { ...r };\n    }\n\n    let min = 10;\n    let bestId = -1;\n    let bestOptions = [] as Array<number>;\n\n    const aba = Array.from(ab.entries());\n    for (let [id, nums] of aba) {\n      const badA = badAssignBoard.get(id) || [];\n      const fnums =\n        badA.length < 1 ? nums : nums.filter((e) => !badA.includes(e));\n      const l = fnums.length;\n      if (l < 1) {\n        // Some square has run out of moves!\n        // console.error(`No moves left for ${id}!`);\n\n        // Pop the most recent guess\n        const rg = { ...guesses.pop() } as Action;\n        console.log(\"rg\", rg, guesses.slice());\n        if (!rg) {\n          console.error(`No more guesses to pop!`);\n          return { ...r };\n        }\n\n        // console.log(`Popping most recent guess: ${rg.tileId}=>${rg.val}`);\n\n        // Record that the guess is bad (has led to a dead end)\n        const gTileId = rg.tileId;\n        const gVal = rg.val;\n        const badguesses = badAssignBoard.get(gTileId) || [];\n        badAssignBoard.set(gTileId, [...badguesses, gVal]);\n\n        // Set undo count\n        undoTarget = gTileId;\n        const guessIdx = history.findIndex((e) => e.tileId === gTileId);\n        if (guessIdx < 0) {\n          console.error(\"Guess cannot be found in history!\");\n          console.log(\"Tile:\", gTileId, \"Value:\", gVal);\n          console.log(\"Err History:\", history.slice());\n          undoCount = 0;\n          return { ...r };\n        }\n\n        undoCount = history.length - guessIdx - 1;\n        // console.log(\n        //   \"History length:\",\n        //   history.length,\n        //   \"Moves to undo:\",\n        //   undoCount\n        // );\n\n        // Begin undo\n        r = getUndoAction();\n        return { ...r };\n      }\n\n      // Get unassigned tile\n      if (getTileValueById(id, b) === 0) {\n        // Get most constrained space\n        if (l < min) {\n          min = l;\n          bestId = id;\n          bestOptions = fnums;\n        }\n      }\n    }\n\n    r.tileId = bestId;\n    r.val = bestOptions[Math.floor(Math.random() * bestOptions.length)];\n\n    if (min > 1) {\n      // console.log(`Guessing ${r.tileId}=${r.val} from: ${bestOptions}`);\n      guesses.push({ ...r });\n    }\n    // console.log(`${min > 1 ? \"Best\" : \"Only\"} move is: ${r.tileId} ${r.val}`);\n\n    history.push({ ...r });\n\n    return { ...r };\n  };\n\n  const getMove = (b: Board) => getBestMove(b, badAssignBoard);\n\n  return {\n    startNewAttempt,\n    getMove,\n  };\n};\n","import React from \"react\";\nimport Tile from \"./Tile\";\nimport \"./sudoku.css\";\nimport type { Board } from \"./types\";\nimport { getTileID, getTileFromId } from \"./game-logic\";\n\ninterface BoardProps {\n  getTileValue: (x: number, y: number) => number;\n  validBoard: Board;\n  fixedBoardNumbers: Board;\n  hoveredTile: number;\n  setHoveredTile: (t: number) => void;\n  selectedTile: number;\n  handleSelectTile: (t: number) => void;\n}\n\nconst DEFAULT_BOARD = new Array(9)\n  .fill(null)\n  .map((_, i) => new Array(9).fill(null));\n\nconst GameBoard = ({\n  getTileValue,\n  validBoard,\n  hoveredTile,\n  setHoveredTile,\n  selectedTile,\n  fixedBoardNumbers,\n  handleSelectTile,\n}: BoardProps) => {\n  const handleHover = (x: number, y: number) => {\n    return () => {\n      setHoveredTile(getTileID(x, y));\n    };\n  };\n\n  const handleHoverEnd = (x: number, y: number) => {\n    return () => {\n      setHoveredTile(-1);\n    };\n  };\n\n  const isHovered = (x: number, y: number) => hoveredTile === getTileID(x, y);\n\n  const isHighlighted = (x: number, y: number) => {\n    const [hx, hy] = getTileFromId(hoveredTile);\n    if (x === hx || y === hy) {\n      return true;\n    }\n    // Box check\n    let boxCols = [6, 7, 8];\n    if (x < 3) {\n      boxCols = [0, 1, 2];\n    } else if (x < 6) {\n      boxCols = [3, 4, 5];\n    }\n\n    let boxRows = [6, 7, 8];\n    if (y < 3) {\n      boxRows = [0, 1, 2];\n    } else if (y < 6) {\n      boxRows = [3, 4, 5];\n    }\n\n    return boxCols.includes(hx) && boxRows.includes(hy);\n  };\n\n  const handleClick = (x: number, y: number) => {\n    return () => {\n      handleSelectTile(getTileID(x, y));\n    };\n  };\n\n  const getTileProps = (x: number, y: number) => ({\n    x: x,\n    y: y,\n    value: getTileValue(x, y),\n    isValid: !!validBoard[y][x],\n    isFocused: isHovered(x, y),\n    isFixed: fixedBoardNumbers[y][x] > 0,\n    isHighlighted: isHighlighted(x, y),\n    onHover: handleHover(x, y),\n    onHoverEnd: handleHoverEnd(x, y),\n    isSelected: getTileID(x, y) === selectedTile,\n    onClick: handleClick(x, y),\n  });\n\n  return (\n    <div className=\"gameboard\">\n      {DEFAULT_BOARD.map((r, y) => (\n        <div className=\"row\" key={`row-${y}`}>\n          {r.map((v, x) => (\n            <Tile key={`t-${getTileID(x, y)}`} {...getTileProps(x, y)} />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default GameBoard;\n","import React, { memo } from \"react\";\nimport \"./numpad.css\";\ninterface Props {\n  onSet: (n: number) => void;\n  currVal: number;\n  availableNums: Array<number>;\n}\nconst Numpad = ({ onSet, currVal, availableNums }: Props) => {\n  // console.log(\"Numpad Rerender\");\n  return (\n    <div className=\"numpad\">\n      {new Array(9).fill(null).map((_, i) => (\n        <button\n          key={`num-${i + 1}`}\n          onClick={() => onSet(i + 1)}\n          className={`number ${currVal === i + 1 ? \"highlight\" : \"\"} ${\n            !availableNums.includes(i + 1) ? \"badnum\" : \"\"\n          }`}\n        >\n          {i + 1}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(Numpad);\n","import { Board } from \"./types\";\n\nconst garena = [\n  \"409253071\",\n  \"020981560\",\n  \"518607203\",\n  \"694070325\",\n  \"001302740\",\n  \"230495018\",\n  \"170504906\",\n  \"980016432\",\n  \"046800150\",\n];\n\nconst easy = [\n  \"702051900\",\n  \"304920100\",\n  \"000070650\",\n  \"931000000\",\n  \"200007380\",\n  \"670340019\",\n  \"497680201\",\n  \"100030000\",\n  \"000009407\",\n];\n\nconst medium = [\n  \"000500000\",\n  \"950000080\",\n  \"038007250\",\n  \"103000009\",\n  \"009704162\",\n  \"046219000\",\n  \"017000300\",\n  \"000050720\",\n  \"000000090\",\n];\n\nconst hard = [\n  \"300040960\",\n  \"900008010\",\n  \"600005000\",\n  \"008004090\",\n  \"100300020\",\n  \"000000000\",\n  \"000000506\",\n  \"001050002\",\n  \"007002040\",\n];\n\nconst puzzleToBoard = (p: Array<string>) => {\n  const b = [] as Board;\n  p.forEach((sr: string) => {\n    const row = [];\n    for (let i = 0; i < sr.length; i++) {\n      row.push(parseInt(sr[i]));\n    }\n    b.push(row);\n  });\n  return b;\n};\n\nexport const puzzles = {\n  easy: puzzleToBoard(garena),\n  medium: puzzleToBoard(medium),\n  hard: puzzleToBoard(hard),\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport GameBoard from \"./GameBoard\";\nimport { Board } from \"./types\";\nimport \"./sudoku.css\";\nimport \"./ui.css\";\nimport Numpad from \"./Numpad\";\nimport { puzzles } from \"./puzzles\";\nimport {\n  getAvailableNumbersById,\n  getTileFromId,\n  getTileID,\n  getTileValue,\n  getTileValueById,\n  isBoardFilled,\n  isInvalidCoords,\n  useAutoSolver,\n} from \"./game-logic\";\n\nconst ROWS = 9;\nconst COLS = 9;\n\nconst getEmptyBoard = () =>\n  new Array(ROWS).fill(null).map(() => new Array(COLS).fill(0)) as Board;\n\ninterface Args {\n  mobile: boolean;\n}\n\nconst Sudoku = ({ mobile }: Args) => {\n  const [isAutosolving, setAutosolving] = useState<boolean>(false);\n  const [autosolveTimeout, setAutosolveTimeout] = useState<number>();\n  const [btnDisabled, setBtnDisabled] = useState<string>(\"\");\n  const [currBoard, setCurrBoard] = useState<Board>(getEmptyBoard());\n  const [fixedBoardNumbers, setFixedBoardNumbers] = useState<Board>(\n    getEmptyBoard()\n  );\n  const [autoSolveDelay, setAutoSolveDelay] = useState<number>(500);\n  const [prevBoard, setPrevBoard] = useState<Board>(getEmptyBoard());\n  const [validBoard, setValidBoard] = useState<Board>(getEmptyBoard());\n  const [selectedTile, setSelectedTile] = useState<number>(-1);\n  const [hoveredTile, setHoveredTile] = useState<number>(-1);\n  const [currAvailNums, setCurrAvailNums] = useState<Array<number>>([]);\n\n  // ==================== Tile Helper Functions ====================\n\n  const isTileValid = (x: number, y: number, val: number, b: Board) => {\n    if (val === 0) {\n      return true;\n    }\n\n    let valid = true;\n\n    // Horizontal check\n    valid = !b[y].some((v: number, dx: number) => v === val && dx !== x);\n\n    if (!valid) {\n      // console.log(\"hori fail\", b[y]);\n      return false;\n    }\n\n    // Vertical check\n    valid = !b.some((e, dy) => e[x] === val && dy !== y);\n\n    if (!valid) {\n      // console.log(\"vert fail\");\n      return false;\n    }\n\n    // Box check\n    let boxCols = [6, 7, 8];\n    if (x < 3) {\n      boxCols = [0, 1, 2];\n    } else if (x < 6) {\n      boxCols = [3, 4, 5];\n    }\n\n    let boxRows = [6, 7, 8];\n    if (y < 3) {\n      boxRows = [0, 1, 2];\n    } else if (y < 6) {\n      boxRows = [3, 4, 5];\n    }\n\n    valid = !boxRows.some((dy) =>\n      boxCols.some((dx) => b[dy][dx] === val && (dx !== x || dy !== y))\n    );\n\n    return valid;\n  };\n\n  // ==================== Mutators ====================\n  const clearBoard = () => {\n    setAutosolving(false);\n    setCurrBoard(getEmptyBoard());\n  };\n\n  const updateValidBoard = useCallback(\n    (b: Board) => {\n      // console.log(\"Updating Valid Board\");\n      const newVB = getEmptyBoard();\n      currBoard.forEach((r, y) =>\n        r.forEach((v, x) => (newVB[y][x] = isTileValid(x, y, v, b) ? 1 : 0))\n      );\n      setValidBoard(newVB);\n      // console.log(\"Finished updating Valid Board\");\n    },\n    [currBoard]\n  );\n\n  const setNumber = (x: number, y: number, val: number, b: Board) => {\n    const nb = b.map((r) => [...r]);\n    nb[y][x] = val;\n    setCurrBoard(nb);\n    return nb;\n  };\n\n  const handleSetValue = (tileId: number, val: number, b: Board) => {\n    if (tileId < 0) {\n      return;\n    }\n\n    if (getTileValueById(tileId, b) === val) {\n      return;\n    }\n\n    const [x, y] = getTileFromId(tileId);\n\n    // Check if it is a puzzle piece\n    if (fixedBoardNumbers[y][x] > 0) {\n      return;\n    }\n\n    // Capture previous board\n    const pb = b.map((r) => [...r]);\n    setPrevBoard(pb);\n\n    // Set the number\n    return setNumber(x, y, val, b);\n  };\n\n  const clearNumber = (x: number, y: number, b: Board) => {\n    handleSetValue(getTileID(x, y), 0, b);\n  };\n\n  const handleSelectTile = (id: number) => {\n    setSelectedTile(id);\n    setCurrAvailNums(getAvailableNumbersById(id, currBoard));\n  };\n\n  // ==================== Auto solver ====================\n\n  const autosolver = useAutoSolver();\n  const doBestMove = (board: Board) => {\n    if (isBoardFilled(board)) {\n      return;\n    }\n\n    const { tileId, val } = autosolver.getMove(board);\n\n    handleSelectTile(tileId);\n    return handleSetValue(tileId, val, board);\n  };\n\n  const autoSolve = (board: Board) => {\n    const nb = doBestMove(board);\n    if (!nb) {\n      window.console.log(\"ERROR doing best move\");\n      clearTimeout(autosolveTimeout);\n      setAutosolveTimeout(0);\n      setAutosolving(false);\n      return;\n    }\n    setAutosolveTimeout(window.setTimeout(() => autoSolve(nb), autoSolveDelay));\n  };\n\n  const handleAutoSolve = () => {\n    clearTimeout(autosolveTimeout);\n    setAutosolveTimeout(0);\n\n    if (isAutosolving) {\n      setAutosolving(false);\n      return;\n    }\n\n    autosolver.startNewAttempt();\n    setAutosolving(true);\n    setBtnDisabled(\"disabled\");\n    autoSolve(currBoard);\n  };\n\n  // ==================== Game functions ====================\n  const setBoardToPuzzle = (difficulty: number) => {\n    setPrevBoard(getEmptyBoard());\n    let newPuzzle = [];\n    switch (difficulty) {\n      case 1:\n        newPuzzle = puzzles.medium;\n        break;\n      case 2:\n        newPuzzle = puzzles.hard;\n        break;\n      default:\n        newPuzzle = puzzles.easy;\n    }\n\n    handleSelectTile(-1);\n    setFixedBoardNumbers(newPuzzle);\n    setCurrBoard(newPuzzle);\n  };\n\n  // ==================== Keyboard handlers ====================\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    const { key } = e;\n    const [x, y] = getTileFromId(selectedTile);\n    let [nx, ny] = [-1, -1];\n\n    let newVal = -1;\n\n    switch (key) {\n      case \"w\":\n      case \"ArrowUp\":\n        [nx, ny] = [x, y - 1];\n        break;\n\n      case \"s\":\n      case \"ArrowDown\":\n        [nx, ny] = [x, y + 1];\n        break;\n      case \"a\":\n      case \"ArrowLeft\":\n        [nx, ny] = [x - 1, y];\n\n        break;\n      case \"d\":\n      case \"ArrowRight\":\n        [nx, ny] = [x + 1, y];\n        break;\n\n      case \"0\":\n      case \"Escape\":\n      case \"Backspace\":\n        clearNumber(x, y, currBoard);\n        break;\n\n      default:\n        const n = parseInt(key);\n        console.log(\"key\", key, n, !!n);\n        if (n) {\n          newVal = n;\n        }\n        break;\n    }\n\n    if (nx > -1) {\n      // A move\n      if (isInvalidCoords(nx, ny)) {\n        return;\n      }\n\n      const id = getTileID(nx, ny);\n      handleSelectTile(id);\n      setHoveredTile(id);\n    }\n\n    if (newVal > -1) {\n      // A number\n      console.log(\"set val\", newVal);\n      handleSetValue(selectedTile, newVal, currBoard);\n    }\n  };\n\n  // ==================== Hooks ====================\n  // Update validBoard whenever currBoard changes\n  useEffect(() => {\n    if (!isAutosolving || true) {\n      updateValidBoard(currBoard);\n    }\n  }, [isAutosolving, updateValidBoard, currBoard]);\n\n  useEffect(() => {\n    setBoardToPuzzle(1);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const boardProps = {\n    getTileValue: (x: number, y: number) => getTileValue(x, y, currBoard),\n    validBoard,\n    selectedTile,\n    handleSelectTile,\n    hoveredTile,\n    fixedBoardNumbers,\n    setHoveredTile,\n  };\n\n  const difficulties = [\n    [\"Easy\", 0],\n    [\"Medium\", 1],\n    [\"Hard\", 2],\n  ];\n\n  return (\n    <div tabIndex={0} className=\"sudoku\" onKeyDown={handleKeyDown}>\n      <GameBoard {...boardProps} />\n      <div className=\"actions-group\">\n        <div className=\"puzzle-select\">\n          {difficulties.map(([txt, puzzleId]) => (\n            <button\n              className={`btn-ui`}\n              disabled={isAutosolving}\n              onClick={() => setBoardToPuzzle(puzzleId as number)}\n            >\n              {txt}\n            </button>\n          ))}\n        </div>\n\n        <Numpad\n          availableNums={currAvailNums}\n          currVal={getTileValueById(selectedTile, currBoard)}\n          onSet={(v: number) => handleSetValue(selectedTile, v, currBoard)}\n        />\n\n        <div className=\"slidecontainer\">\n          <input\n            disabled={isAutosolving}\n            type=\"range\"\n            min=\"20\"\n            max=\"2500\"\n            value={autoSolveDelay}\n            className=\"slider\"\n            id=\"myRange\"\n            onChange={(e) => setAutoSolveDelay(parseInt(e.target.value))}\n          />\n          <span className=\"text-input-label\">{autoSolveDelay}ms</span>\n\n          <button\n            className={`btn-ui btn-wide  ${btnDisabled}`}\n            onClick={handleAutoSolve}\n          >\n            {!isAutosolving ? \"Auto Solve\" : \"Stop\"}\n          </button>\n        </div>\n\n        <button\n          className={`btn-ui btn-wide ${btnDisabled}`}\n          onClick={clearBoard}\n        >\n          Clear Board\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Sudoku;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport { useMediaQuery } from \"react-responsive\";\nimport \"./App.css\";\nimport Sudoku from \"./components/Sudoku\";\n\nfunction App() {\n  const isMobile = useMediaQuery({ query: \"(max-width: 800px)\" });\n\n  console.log(isMobile);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" /> by David Goh\n      </header>\n\n      <Sudoku mobile={isMobile} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}